// 非比较性排序
// 思想利用空间换时间
// 原数组    [6,5,3,3,2,2,1]
// 累计数组  [0,1,2,2,0,1,1]
// 累计数组的下标对应着原数组值， 值代表原数组的值出现的次数
// 比如 a[0] = 0 ,代表 0出现的次数为 0, a[1] = 1 代表 1 出现的次数为1，其他类推
// 位置确认  [0,1,3,5,5,6,7]
// 比如 b[1] = 1, 代表 1 应该存放在 1这个位置， b[2] = 3 代表2应该存放在3的位置（为什么？因为 a[2] = 2,代表2出现2次）


function count_sort(arr) {
  const max = Math.max(...arr)
  const B = Array(max).fill(0) // 累计数组
  const C = Array(arr.length)  // 结果数组
  // 计算值的出现次数
  arr.forEach((_, i) => B[A[i]]++)
  // 填充位置确认， 当前填充位置等于前一个位置 + 当前占位
  for(let i = 0; i < arr.length; i++) {
    B[i] = B[i-1] + B[i]
  }
  // 填充结果
  for(let i = 0; i < arr.length; i++) {
    const p = B[arr[i]] - 1 // 回写的位置
    // 处理重复出现的， 比如 
    B[A[i]]-- // 新的回写位置
    C[p] =  A[i] // 回写结束
  }
  return C
}